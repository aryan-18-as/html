# -*- coding: utf-8 -*-
"""untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/aryan-18-as/e30ae7dc950e958e68175122c340d8f1/untitled10.ipynb
"""

pip install weasyprint

pip install python-docx

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.plotting import table
import numpy as np
from sklearn.preprocessing import LabelEncoder
from weasyprint import HTML
from io import BytesIO
import os
from docx import Document


def generate_report(df: pd.DataFrame, report_format='html', output_path='report'):

    # 1. List down columns with missing values
    missing_values = df.isnull().sum()
    missing_columns = missing_values[missing_values > 0].index.tolist()

    # 2. Categorize columns based on data types
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    non_numeric_cols = df.select_dtypes(exclude=[np.number]).columns.tolist()

    # 3. Identify and handle duplicate columns
    duplicates = df.columns[df.columns.duplicated()].tolist()
    before_duplicates = df.copy()
    df = df.loc[:, ~df.columns.duplicated()]
    after_duplicates = df.copy()

    # 4. Identify and handle constant columns
    constant_columns = df.columns[df.nunique() <= 1].tolist()
    before_constant = df.copy()
    df = df.loc[:, df.nunique() > 1]
    after_constant = df.copy()



    # 6. Create distribution charts for 6 columns
    chart_paths = []
    for col in df.columns[:6]:
        plt.figure(figsize=(8, 6))
        sns.histplot(df[col], kde=True)
        chart_path = f"{col}_distribution.png"
        plt.savefig(chart_path)
        chart_paths.append(chart_path)
        plt.close()

    # Generating Report
    report = Document()
    report.add_heading('Data Analysis Report', 0)

    # Missing Values
    report.add_heading('Columns with Missing Values', level=1)
    if missing_columns:
        report.add_paragraph(str(missing_columns))
    else:
        report.add_paragraph("No missing values.")

    # Numeric and Non-Numeric Columns
    report.add_heading('Categorized Columns', level=1)
    report.add_heading('Numeric Columns', level=2)
    report.add_paragraph(str(numeric_cols))
    report.add_heading('Non-Numeric Columns', level=2)
    report.add_paragraph(str(non_numeric_cols))

    # Duplicates Before and After
    report.add_heading('Duplicate Columns', level=1)
    report.add_heading('Before Removing Duplicates', level=2)
    report.add_paragraph(f"Duplicate columns: {duplicates}")
    report.add_heading('After Removing Duplicates', level=2)
    report.add_paragraph(f"Columns after removal: {df.columns.tolist()}")

    # Constant Columns Before and After
    report.add_heading('Constant Columns', level=1)
    report.add_heading('Before Removing Constant Columns', level=2)
    report.add_paragraph(f"Constant columns: {constant_columns}")
    report.add_heading('After Removing Constant Columns', level=2)
    report.add_paragraph(f"Columns after removal: {df.columns.tolist()}")

    # Boxplot for Outliers
    report.add_heading('Boxplot for Numeric Columns (Outliers)', level=1)
    report.add_paragraph("Boxplot to visualize outliers in numeric columns")


    # Distribution Charts for First 6 Columns
    report.add_heading('Distribution Charts for 6 Columns', level=1)
    for chart_path in chart_paths:
        report.add_picture(chart_path)

    # Save Report as HTML, PDF, or Word
    if report_format == 'html':
        html_content = f'<h1>Data Analysis Report</h1>'
        html_content += f'<h2>Columns with Missing Values</h2><p>{missing_columns}</p>'
        html_content += f'<h2>Categorized Columns</h2><h3>Numeric Columns</h3><p>{numeric_cols}</p>'
        html_content += f'<h3>Non-Numeric Columns</h3><p>{non_numeric_cols}</p>'
        html_content += f'<h2>Duplicate Columns</h2><h3>Before Removing Duplicates</h3><p>{duplicates}</p>'
        html_content += f'<h3>After Removing Duplicates</h3><p>{df.columns.tolist()}</p>'
        html_content += f'<h2>Constant Columns</h2><h3>Before Removing Constant Columns</h3><p>{constant_columns}</p>'
        html_content += f'<h3>After Removing Constant Columns</h3><p>{df.columns.tolist()}</p>'
        html_content += f'<h2>Boxplot for Numeric Columns (Outliers)</h2>'

        html_content += f'<h2>Distribution Charts for 6 Columns</h2>'
        for chart_path in chart_paths:
            html_content += f'<img src="{chart_path}" alt="{chart_path}" />'

        with open(f'{output_path}.html', 'w') as file:
            file.write(html_content)

    elif report_format == 'pdf':
        html_report = HTML(string=html_content)
        html_report.write_pdf(f'{output_path}.pdf')

    elif report_format == 'word':
        report.save(f'{output_path}.docx')

    # Cleanup generated chart files

    for chart_path in chart_paths:
        os.remove(chart_path)

    print(f'Report saved as {output_path}.{report_format}')


# Example Usage
data = {
    'col1': [1, 2, np.nan, 4, 5],
    'col2': ['a', 'b', 'b', 'c', 'c'],
    'col3': [5, 5, 5, 5, 5],
    'col4': [1, 1, 1, 2, 2]
}

df = pd.DataFrame(data)
generate_report(df, report_format='html', output_path='analysis_report')

